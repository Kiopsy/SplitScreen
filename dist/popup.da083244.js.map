{"mappings":"AACA,MAAMA,EAAIC,OAAOC,OAAOC,WAClBC,EAAIH,OAAOC,OAAOG,Y,SAepBC,EAASC,EAAAC,EAAAC,G,OACTC,QAAWC,OAAM,CACjBC,IAAKL,EACFM,KAAA,SACNC,MAAAC,KAAAC,MAAAR,GAEDS,OAAAb,EAMIK,KAAOM,KAAQC,MAAAP,GACfS,IAAI,G,UAODC,EAAAX,EAAAC,GACNW,OAAAV,QAAAW,YAAA,SAAAC,GAGc,IAAAC,EAAA,CACXT,MAAAC,KAAAC,MAAAR,GACIS,OAAYb,EAAKK,KAAAM,KAAeC,MAAIP,GAAGS,IAAA,EAGvCK,MAAkB,UAAAH,OAAAV,QAAAc,OAAAF,EAAAG,GAAAF,EACtB,G,gBAIIG,EAAkBC,EAAAC,G,IAQpBC,EAAiBC,EAHjBvB,QAAAa,OAAoBb,KAAAwB,MAHpB,CACDC,eAAU,IAGVC,EAAM,GACLC,EAAA,GAEDC,EAAAR,GAzDsB,KA2DnBE,EAASO,EAASC,KAClBP,EAASM,EAASpC,EAAmB,IA3DjC,KA6DRmC,EAA0B,GAAAR,GA9DH,KA+DnBE,EAAgBO,EAAApC,EAAA,IA9DZ,IA+DN8B,EACEM,EAAyBC,OAI1BR,EAAAF,EAECG,EAAmB,GAAAH,G,IAEnBW,EAAAH,EAAaN,GAChBU,EAAMJ,EAAAL,G,EAEHU,SAAAC,IACHA,EAAAC,OAAAR,EAAAS,KAAAF,EAAA7B,KACJqB,EAAAU,KAAAF,EAAA7B,IAAA,IAGQ,KAATgB,GACEtB,EAAiB4B,EAAQI,EAAA,GAC1BnB,EAAAoB,EAAAD,KAGDhC,EAAkB4B,EAAOI,EAAAC,GACvBpB,EAAiBoB,EAAO,G,6DCrF1B,IAAIK,EAAQC,SAASC,eAAe,kBAOhCC,EAAQ,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IAC7CC,EAAc,CAAC,MAAO,MAAO,MAAO,MAAO,OAE/C,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAAK,CACnC,IAAIE,EAAKN,SAASO,cAAc,MAE5BC,EAAKR,SAASO,cAAc,MAE5BE,EAAQT,SAASO,cAAc,KACnCE,EAAMC,aAAa,QAAS,gBAC5BD,EAAME,YAAYX,SAASY,eAAeT,EAAYC,KACtDI,EAAGG,YAAYF,GACfH,EAAGK,YAAYH,GAEXA,EAAKR,SAASO,cAAc,MAEhC,IAAK,IAAIM,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IACI5C,EAtBM,KAqBO,GAAKiC,EAAME,GAAGS,IAK/B,MAAMC,EAAQ,6BAId,IAAIC,EAAMf,SAASgB,gBAAgBF,EAAO,OAC1CC,EAAIL,aAAa,QAASzC,GAC1B8C,EAAIL,aAAa,SA/BN,IAkCX,IAAIO,EAAUjB,SAASgB,gBAAgBF,EAAO,QAU9C,SAASI,IAEDrC,EAAMqB,EAAME,GAAGS,GADV,GAALA,EACmB,IAEA,I,CAZ3BI,EAAQP,aAAa,QAASzC,GAC9BgD,EAAQP,aAAa,SArCV,IAsCXO,EAAQP,aAAa,eAAgB,QACrCO,EAAQP,aAAa,QAAS,eAG9BK,EAAIJ,YAAYM,GAUhBA,EAAQE,iBAAiB,QAASD,GAClCV,EAAGG,YAAYI,E,CAGnBT,EAAGK,YAAYH,GACfT,EAAMY,YAAYL,E","sources":["src/windowManager.js","src/options.js"],"sourcesContent":["// Window Manager\r\nconst w = window.screen.availWidth;\r\nconst h = window.screen.availHeight;\r\nconst chrome_width_limit = 500;\r\nconst gap = 20;\r\n\r\n/**\r\n * Create a new window with the given tabs, size, and left position.\r\n * @param tabs - an array of URLs to open in the window\r\n * @param size - the number of windows you want to create\r\n * @param left - The left position of the window. This value is ignored for panels.\r\n */\r\nfunction createWindow(tabs, size, left) {\r\n    chrome.windows.create({\r\n    url: tabs,\r\n    type: \"normal\",\r\n    width: Math.round(size),\r\n    height: h,\r\n    left: Math.round(left),\r\n    top: 0\r\n    });\r\n}\r\n\r\n/**\r\n * Get the current window, then update it with the new size and position.\r\n * @param size - The number of windows you want to split the screen into.\r\n * @param left - The left position of the window.\r\n */\r\nfunction updateWindow(size, left) {\r\n    chrome.windows.getCurrent(function (window) {\r\n    var updateInfo = {\r\n        width: Math.round(size),\r\n        height: h,\r\n        left: Math.round(left),\r\n        top: 0\r\n    };\r\n    (updateInfo.state = \"normal\"), chrome.windows.update(window.id, updateInfo);\r\n    });\r\n}\r\n\r\n/* Splitting the screen into two parts. */\r\nexport default async function split(ratio, screenSide) {\r\n    // query Chrome for tabs in current window\r\n    let queryOptions = { currentWindow: true };\r\n    let tabs = await chrome.tabs.query(queryOptions);\r\n\r\n    let inactiveTabs = [];\r\n    let activeTabs = [];\r\n\r\n    let screenSideRatio, oppositeSideRatio;\r\n    \r\n    if (toPixels(ratio) < chrome_width_limit ) {\r\n      screenSideRatio = fromPixels(chrome_width_limit + gap);\r\n      oppositeSideRatio = fromPixels(w - 500 - gap);\r\n    } else if (toPixels(10 - ratio) < chrome_width_limit) { \r\n      screenSideRatio = fromPixels(w - 500 - gap);\r\n      oppositeSideRatio = fromPixels(chrome_width_limit + gap);\r\n    } else {\r\n      screenSideRatio = ratio;\r\n      oppositeSideRatio = 10 - ratio;\r\n    }\r\n\r\n    let l_size = toPixels(screenSideRatio);\r\n    let r_size = toPixels(oppositeSideRatio);\r\n\r\n    // sort tabs by activeness\r\n    tabs.forEach(tab => {\r\n      if (tab.active) {\r\n        activeTabs.push(tab.url);\r\n      } else {\r\n        inactiveTabs.push(tab.url);\r\n      }\r\n    });\r\n\r\n    if (screenSide == \"L\") {\r\n        createWindow(activeTabs, l_size, 0);\r\n        updateWindow(r_size, l_size);\r\n    } else {\r\n        createWindow(activeTabs, l_size, r_size);\r\n        updateWindow(r_size, 0);\r\n    }\r\n}\r\n\r\n// get a ratio from the number of pixels on the screen\r\nfunction fromPixels(pixels) {\r\n  return 10 / (w / pixels);\r\n}\r\n\r\n// pass in a ratio, get back the number of pixesls it takes up on-screen\r\nfunction toPixels(ratio) {\r\n  return w / (10 / ratio);\r\n}","// Dynamically creates screen option elements into UI \r\n\r\nimport split from \"./windowManager.js\";\r\n\r\n// Getting the parent table container\r\nlet table = document.getElementById(\"main_container\");\r\n\r\n// size of the clickable option bar in the UI\r\nlet optionWidth = 104;\r\nlet optionHeight = 41;\r\n\r\n// different option sizes\r\nlet sizes = [[3, 7], [4, 6], [5, 5], [6, 4], [7, 3]];\r\nlet size_labels = [\"3:7\", \"4:6\", \"5:5\", \"6:4\", \"7:3\"]\r\n\r\nfor (let i = 0; i < sizes.length; i++) {\r\n    var tr = document.createElement('tr');  \r\n\r\n    var td = document.createElement('td');\r\n\r\n    var label = document.createElement('p');\r\n    label.setAttribute(\"class\", \"number-label\");\r\n    label.appendChild(document.createTextNode(size_labels[i]));\r\n    td.appendChild(label);\r\n    tr.appendChild(td);\r\n\r\n    var td = document.createElement('td');\r\n\r\n    for (let k = 0; k < 2; k++) {\r\n        let sizeSplit = (10 / sizes[i][k]);\r\n        let width = optionWidth / sizeSplit;\r\n\r\n\r\n        // variable for the namespace \r\n        const svgns = \"http://www.w3.org/2000/svg\";\r\n\r\n        // make a simple rectangle\r\n        \r\n        var svg = document.createElementNS(svgns, \"svg\");\r\n        svg.setAttribute(\"width\", width);\r\n        svg.setAttribute(\"height\", optionHeight);\r\n        \r\n    \r\n        let newRect = document.createElementNS(svgns, \"rect\");\r\n\r\n        newRect.setAttribute(\"width\", width);\r\n        newRect.setAttribute(\"height\", optionHeight);        \r\n        newRect.setAttribute(\"margin-right\", \"10px\");\r\n        newRect.setAttribute(\"class\", \"screen-name\");\r\n\r\n        // append the new rectangle to the svg\r\n        svg.appendChild(newRect);\r\n\r\n        function func() {\r\n            if (k == 0) {\r\n                split(sizes[i][k], \"L\");\r\n            } else {\r\n                split(sizes[i][k], \"R\");\r\n            }\r\n        }\r\n\r\n        newRect.addEventListener(\"click\", func);\r\n        td.appendChild(svg);\r\n    }\r\n\r\n    tr.appendChild(td);\r\n    table.appendChild(tr)\r\n}"],"names":["$7a48f54f172b4c01$var$w","window","screen","availWidth","$7a48f54f172b4c01$var$h","availHeight","$7a48f54f172b4c01$var$createWindow","tabs","size","left","windows","create","url","type","width","Math","round","height","top","$7a48f54f172b4c01$var$updateWindow","chrome","getCurrent","window1","updateInfo","update","id","$7a48f54f172b4c01$export$2e2bcd8739ae039","ratio","screenSide","screenSideRatio","oppositeSideRatio","query","currentWindow","inactiveTabs","activeTabs","$7a48f54f172b4c01$var$toPixels","$7a48f54f172b4c01$var$fromPixels","$7a48f54f172b4c01$var$chrome_width_limit","l_size","r_size","forEach","tab","active","push","$0520a0e34828ddbf$var$table","document","getElementById","$0520a0e34828ddbf$var$sizes","$0520a0e34828ddbf$var$size_labels","i","length","$0520a0e34828ddbf$var$tr","createElement","$0520a0e34828ddbf$var$td","$0520a0e34828ddbf$var$label","setAttribute","appendChild","createTextNode","k","svgns","$0520a0e34828ddbf$var$svg","createElementNS","newRect","func","addEventListener"],"version":3,"file":"popup.da083244.js.map"}